// @generated by protoc-gen-es v1.5.0
// @generated from file agoric/swingset/swingset.proto (package agoric.swingset, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * CoreEvalProposal is a gov Content type for evaluating code in the SwingSet
 * core.
 * See `agoric-sdk/packages/vats/src/core/eval.js`.
 *
 * @generated from message agoric.swingset.CoreEvalProposal
 */
export const CoreEvalProposal = proto3.makeMessageType(
  "agoric.swingset.CoreEvalProposal",
  () => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "evals", kind: "message", T: CoreEval, repeated: true },
  ],
);

/**
 * CoreEval defines an individual SwingSet core evaluation, for use in
 * CoreEvalProposal.
 *
 * @generated from message agoric.swingset.CoreEval
 */
export const CoreEval = proto3.makeMessageType(
  "agoric.swingset.CoreEval",
  () => [
    { no: 1, name: "json_permits", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "js_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Params are the swingset configuration/governance parameters.
 *
 * @generated from message agoric.swingset.Params
 */
export const Params = proto3.makeMessageType(
  "agoric.swingset.Params",
  () => [
    { no: 1, name: "beans_per_unit", kind: "message", T: StringBeans, repeated: true },
    { no: 2, name: "fee_unit_price", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "bootstrap_vat_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "power_flag_fees", kind: "message", T: PowerFlagFee, repeated: true },
    { no: 5, name: "queue_max", kind: "message", T: QueueSize, repeated: true },
  ],
);

/**
 * The current state of the module.
 *
 * @generated from message agoric.swingset.State
 */
export const State = proto3.makeMessageType(
  "agoric.swingset.State",
  () => [
    { no: 1, name: "queue_allowed", kind: "message", T: QueueSize, repeated: true },
  ],
);

/**
 * Map element of a string key to a Nat bean count.
 *
 * @generated from message agoric.swingset.StringBeans
 */
export const StringBeans = proto3.makeMessageType(
  "agoric.swingset.StringBeans",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "beans", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Map a provisioning power flag to its corresponding fee.
 *
 * @generated from message agoric.swingset.PowerFlagFee
 */
export const PowerFlagFee = proto3.makeMessageType(
  "agoric.swingset.PowerFlagFee",
  () => [
    { no: 1, name: "power_flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fee", kind: "message", T: Coin, repeated: true },
  ],
);

/**
 * Map element of a string key to a size.
 *
 * @generated from message agoric.swingset.QueueSize
 */
export const QueueSize = proto3.makeMessageType(
  "agoric.swingset.QueueSize",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * Egress is the format for a swingset egress.
 *
 * @generated from message agoric.swingset.Egress
 */
export const Egress = proto3.makeMessageType(
  "agoric.swingset.Egress",
  () => [
    { no: 1, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "peer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "power_flags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * SwingStoreArtifact encodes an artifact of a swing-store export.
 * Artifacts may be stored or transmitted in any order. Most handlers do
 * maintain the artifact order from their original source as an effect of how
 * they handle the artifacts.
 *
 * @generated from message agoric.swingset.SwingStoreArtifact
 */
export const SwingStoreArtifact = proto3.makeMessageType(
  "agoric.swingset.SwingStoreArtifact",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

