// @generated by protoc-gen-es v1.5.0
// @generated from file agoric/vstorage/query.proto (package agoric.vstorage, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryDataRequest is the vstorage path data query.
 *
 * @generated from message agoric.vstorage.QueryDataRequest
 */
export declare class QueryDataRequest extends Message<QueryDataRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  constructor(data?: PartialMessage<QueryDataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryDataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDataRequest;

  static equals(a: QueryDataRequest | PlainMessage<QueryDataRequest> | undefined, b: QueryDataRequest | PlainMessage<QueryDataRequest> | undefined): boolean;
}

/**
 * QueryDataResponse is the vstorage path data response.
 *
 * @generated from message agoric.vstorage.QueryDataResponse
 */
export declare class QueryDataResponse extends Message<QueryDataResponse> {
  /**
   * @generated from field: string value = 1;
   */
  value: string;

  constructor(data?: PartialMessage<QueryDataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryDataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDataResponse;

  static equals(a: QueryDataResponse | PlainMessage<QueryDataResponse> | undefined, b: QueryDataResponse | PlainMessage<QueryDataResponse> | undefined): boolean;
}

/**
 * QueryCapDataRequest contains a path and formatting configuration.
 *
 * @generated from message agoric.vstorage.QueryCapDataRequest
 */
export declare class QueryCapDataRequest extends Message<QueryCapDataRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * mediaType must be an actual media type in the registry at
   * https://www.iana.org/assignments/media-types/media-types.xhtml
   * or a special value that does not conflict with the media type syntax.
   * The only valid value is "JSON Lines", which is also the default.
   *
   * @generated from field: string media_type = 2;
   */
  mediaType: string;

  /**
   * itemFormat, if present, must be the special value "flat" to indicate that
   * the deep structure of each item should be flattened into a single level
   * with kebab-case keys (e.g., `{ "metrics": { "min": 0, "max": 88 } }` as
   * `{ "metrics-min": 0, "metrics-max": 88 }`).
   *
   * @generated from field: string item_format = 3;
   */
  itemFormat: string;

  /**
   * remotableValueFormat indicates how to transform references to opaque but
   * distinguishable Remotables into readable embedded representations.
   * * "object" represents each Remotable as an `{ id, allegedName }` object, e.g. `{ "id": "board007", "allegedName": "IST brand" }`.
   * * "string" represents each Remotable as a string with bracket-wrapped contents including its alleged name and id, e.g. "[Alleged: IST brand <board007>]".
   *
   * @generated from field: string remotable_value_format = 10;
   */
  remotableValueFormat: string;

  constructor(data?: PartialMessage<QueryCapDataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryCapDataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCapDataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCapDataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCapDataRequest;

  static equals(a: QueryCapDataRequest | PlainMessage<QueryCapDataRequest> | undefined, b: QueryCapDataRequest | PlainMessage<QueryCapDataRequest> | undefined): boolean;
}

/**
 * QueryCapDataResponse represents the result with the requested formatting,
 * reserving space for future metadata such as media type.
 *
 * @generated from message agoric.vstorage.QueryCapDataResponse
 */
export declare class QueryCapDataResponse extends Message<QueryCapDataResponse> {
  /**
   * @generated from field: string block_height = 1;
   */
  blockHeight: string;

  /**
   * @generated from field: string value = 10;
   */
  value: string;

  constructor(data?: PartialMessage<QueryCapDataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryCapDataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCapDataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCapDataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCapDataResponse;

  static equals(a: QueryCapDataResponse | PlainMessage<QueryCapDataResponse> | undefined, b: QueryCapDataResponse | PlainMessage<QueryCapDataResponse> | undefined): boolean;
}

/**
 * QueryChildrenRequest is the vstorage path children query.
 *
 * @generated from message agoric.vstorage.QueryChildrenRequest
 */
export declare class QueryChildrenRequest extends Message<QueryChildrenRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryChildrenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryChildrenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChildrenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChildrenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChildrenRequest;

  static equals(a: QueryChildrenRequest | PlainMessage<QueryChildrenRequest> | undefined, b: QueryChildrenRequest | PlainMessage<QueryChildrenRequest> | undefined): boolean;
}

/**
 * QueryChildrenResponse is the vstorage path children response.
 *
 * @generated from message agoric.vstorage.QueryChildrenResponse
 */
export declare class QueryChildrenResponse extends Message<QueryChildrenResponse> {
  /**
   * @generated from field: repeated string children = 1;
   */
  children: string[];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryChildrenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vstorage.QueryChildrenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChildrenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChildrenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChildrenResponse;

  static equals(a: QueryChildrenResponse | PlainMessage<QueryChildrenResponse> | undefined, b: QueryChildrenResponse | PlainMessage<QueryChildrenResponse> | undefined): boolean;
}

