// @generated by protoc-gen-es v1.5.0
// @generated from file agoric/vbank/vbank.proto (package agoric.vbank, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * The module governance/configuration parameters.
 *
 * @generated from message agoric.vbank.Params
 */
export declare class Params extends Message<Params> {
  /**
   * reward_epoch_duration_blocks is the length of a reward epoch, in blocks.
   * A value of zero has the same meaning as a value of one:
   * the full reward buffer should be distributed immediately.
   *
   * @generated from field: int64 reward_epoch_duration_blocks = 1;
   */
  rewardEpochDurationBlocks: bigint;

  /**
   * per_epoch_reward_fraction is a fraction of the reward pool to distrubute
   * once every reward epoch.  If less than zero, use approximately continuous
   * per-block distribution.
   *
   * @generated from field: string per_epoch_reward_fraction = 2;
   */
  perEpochRewardFraction: string;

  /**
   * reward_smoothing_blocks is the number of blocks over which to distribute
   * an epoch's rewards.  If zero, use the same value as
   * reward_epoch_duration_blocks.
   *
   * @generated from field: int64 reward_smoothing_blocks = 3;
   */
  rewardSmoothingBlocks: bigint;

  constructor(data?: PartialMessage<Params>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vbank.Params";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params;

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean;
}

/**
 * The current state of the module.
 *
 * @generated from message agoric.vbank.State
 */
export declare class State extends Message<State> {
  /**
   * rewardPool is the current balance of rewards in the module account.
   * NOTE: Tracking manually since there is no bank call for getting a
   * module account balance by name.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward_pool = 1;
   */
  rewardPool: Coin[];

  /**
   * reward_block_amount is the amount of reward, if available, to send to the
   * fee collector module on every block.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward_block_amount = 2;
   */
  rewardBlockAmount: Coin[];

  /**
   * last_sequence is a sequence number for communicating with the VM.
   *
   * @generated from field: uint64 last_sequence = 3;
   */
  lastSequence: bigint;

  /**
   * @generated from field: int64 last_reward_distribution_block = 4;
   */
  lastRewardDistributionBlock: bigint;

  constructor(data?: PartialMessage<State>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agoric.vbank.State";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State;

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean;
}

