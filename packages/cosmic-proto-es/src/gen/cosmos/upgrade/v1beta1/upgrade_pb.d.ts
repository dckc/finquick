// @generated by protoc-gen-es v1.5.0
// @generated from file cosmos/upgrade/v1beta1/upgrade.proto (package cosmos.upgrade.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from message cosmos.upgrade.v1beta1.Plan
 */
export declare class Plan extends Message<Plan> {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
   * has been removed from the SDK.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Timestamp time = 2 [deprecated = true];
   * @deprecated
   */
  time?: Timestamp;

  /**
   * The height at which the upgrade must be performed.
   * Only used if Time is not set.
   *
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
   * moved to the IBC module in the sub module 02-client.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Any upgraded_client_state = 5 [deprecated = true];
   * @deprecated
   */
  upgradedClientState?: Any;

  constructor(data?: PartialMessage<Plan>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.Plan";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plan;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plan;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plan;

  static equals(a: Plan | PlainMessage<Plan> | undefined, b: Plan | PlainMessage<Plan> | undefined): boolean;
}

/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 */
export declare class SoftwareUpgradeProposal extends Message<SoftwareUpgradeProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: cosmos.upgrade.v1beta1.Plan plan = 3;
   */
  plan?: Plan;

  constructor(data?: PartialMessage<SoftwareUpgradeProposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftwareUpgradeProposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftwareUpgradeProposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftwareUpgradeProposal;

  static equals(a: SoftwareUpgradeProposal | PlainMessage<SoftwareUpgradeProposal> | undefined, b: SoftwareUpgradeProposal | PlainMessage<SoftwareUpgradeProposal> | undefined): boolean;
}

/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 */
export declare class CancelSoftwareUpgradeProposal extends Message<CancelSoftwareUpgradeProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  constructor(data?: PartialMessage<CancelSoftwareUpgradeProposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelSoftwareUpgradeProposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelSoftwareUpgradeProposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelSoftwareUpgradeProposal;

  static equals(a: CancelSoftwareUpgradeProposal | PlainMessage<CancelSoftwareUpgradeProposal> | undefined, b: CancelSoftwareUpgradeProposal | PlainMessage<CancelSoftwareUpgradeProposal> | undefined): boolean;
}

/**
 * ModuleVersion specifies a module and its consensus version.
 *
 * @generated from message cosmos.upgrade.v1beta1.ModuleVersion
 */
export declare class ModuleVersion extends Message<ModuleVersion> {
  /**
   * name of the app module
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * consensus version of the app module
   *
   * @generated from field: uint64 version = 2;
   */
  version: bigint;

  constructor(data?: PartialMessage<ModuleVersion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.ModuleVersion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleVersion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleVersion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleVersion;

  static equals(a: ModuleVersion | PlainMessage<ModuleVersion> | undefined, b: ModuleVersion | PlainMessage<ModuleVersion> | undefined): boolean;
}

